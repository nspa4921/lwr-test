/*!
 * Copyright (C) 2019 salesforce.com, inc.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var shared$LWS = require('@locker/shared');

const AttrProtoNameGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Attr.prototype, 'name');
const AttrProtoNamespaceURIGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Attr.prototype, 'namespaceURI');
const AttrProtoOwnerElementGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Attr.prototype, 'ownerElement');
const {
  get: AttrProtoValueGetter$LWS,
  set: AttrProtoValueSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(Attr.prototype, 'value');

function AttrNameGetter$LWS(attr$LWS) {
  return shared$LWS.ReflectApply(AttrProtoNameGetter$LWS, attr$LWS, []);
}

function AttrNamespaceURIGetter$LWS(attr$LWS) {
  return shared$LWS.ReflectApply(AttrProtoNamespaceURIGetter$LWS, attr$LWS, []);
}

function AttrOwnerElementGetter$LWS(attr$LWS) {
  return shared$LWS.ReflectApply(AttrProtoOwnerElementGetter$LWS, attr$LWS, []);
}

function AttrValueGetter$LWS(attr$LWS) {
  return shared$LWS.ReflectApply(AttrProtoValueGetter$LWS, attr$LWS, []);
}

function AttrValueSetter$LWS(attr$LWS, value$LWS) {
  shared$LWS.ReflectApply(AttrProtoValueSetter$LWS, attr$LWS, [value$LWS]);
}

const {
  get: DocumentProtoCookieGetter$LWS,
  set: DocumentProtoCookieSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(Document.prototype, 'cookie');
const {
  createComment: DocumentProtoCreateComment$LWS,
  createElement: DocumentProtoCreateElement$LWS,
  createElementNS: DocumentProtoCreateElementNS$LWS,
  getElementById: DocumentProtoGetElementById$LWS
} = Document.prototype;
const DocumentProtoBodyGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Document.prototype, 'body');
const DocumentProtoDocumentElementGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Document.prototype, 'documentElement');
const DocumentProtoHeadGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Document.prototype, 'head');
const DocumentProtoImplementationGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Document.prototype, 'implementation');

function DocumentBodyGetter$LWS(doc$LWS) {
  return shared$LWS.ReflectApply(DocumentProtoBodyGetter$LWS, doc$LWS, []);
}

function DocumentCookieGetter$LWS(doc$LWS) {
  return shared$LWS.ReflectApply(DocumentProtoCookieGetter$LWS, doc$LWS, []);
}

function DocumentCookieSetter$LWS(doc$LWS, newCookie$LWS) {
  shared$LWS.ReflectApply(DocumentProtoCookieSetter$LWS, doc$LWS, [newCookie$LWS]);
}

function DocumentImplementation$LWS(doc$LWS) {
  return shared$LWS.ReflectApply(DocumentProtoImplementationGetter$LWS, doc$LWS, []);
}

function DocumentCreateComment$LWS(doc$LWS, data$LWS = '') {
  return shared$LWS.ReflectApply(DocumentProtoCreateComment$LWS, doc$LWS, [data$LWS]);
}

function DocumentCreateElement$LWS(doc$LWS, ...args$LWS) {
  return shared$LWS.ReflectApply(DocumentProtoCreateElement$LWS, doc$LWS, args$LWS);
}

function DocumentCreateElementNS$LWS(doc$LWS, ...args$LWS) {
  return shared$LWS.ReflectApply(DocumentProtoCreateElementNS$LWS, doc$LWS, args$LWS);
}

function DocumentDocumentElementGetter$LWS(doc$LWS) {
  return shared$LWS.ReflectApply(DocumentProtoDocumentElementGetter$LWS, doc$LWS, []);
}

function DocumentGetElementById$LWS(doc$LWS, id$LWS) {
  return shared$LWS.ReflectApply(DocumentProtoGetElementById$LWS, doc$LWS, [id$LWS]);
}

function DocumentHeadGetter$LWS(doc$LWS) {
  return shared$LWS.ReflectApply(DocumentProtoHeadGetter$LWS, doc$LWS, []);
}

function nsCookieRootKey$LWS(ns$LWS) {
  return `LSKey-${ns$LWS}$`;
}

function nsCookieKey$LWS(key$LWS, ns$LWS) {
  return `${nsCookieRootKey$LWS(ns$LWS)}${key$LWS}`;
}

const {
  setAttribute: ElementProtoSetAttribute$LWS,
  setAttributeNS: ElementProtoSetAttributeNS$LWS
} = Element.prototype;
const {
  closest: ElementProtoClosest$LWS,
  getAttribute: ElementProtoGetAttribute$LWS,
  getAttributeNode: ElementProtoGetAttributeNode$LWS,
  getAttributeNodeNS: ElementProtoGetAttributeNodeNS$LWS,
  hasAttribute: ElementProtoHasAttribute$LWS,
  querySelector: ElementProtoQuerySelector$LWS,
  removeAttributeNode: ElementProtoRemoveAttributeNode$LWS
} = Element.prototype;
const {
  get: ElementProtoInnerHTMLGetter$LWS,
  set: ElementProtoInnerHTMLSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(Element.prototype, 'innerHTML');
const {
  get: ElementProtoOuterHTMLGetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(Element.prototype, 'outerHTML');
const ElementProtoGetNamespaceURI$LWS = shared$LWS.ObjectLookupOwnGetter(Element.prototype, 'namespaceURI');

function ElementClosest$LWS(el$LWS, selectors$LWS) {
  return shared$LWS.ReflectApply(ElementProtoClosest$LWS, el$LWS, [selectors$LWS]);
}

function ElementInnerHTMLGetter$LWS(el$LWS) {
  return shared$LWS.ReflectApply(ElementProtoInnerHTMLGetter$LWS, el$LWS, []);
}

function ElementInnerHTMLSetter$LWS(el$LWS, html$LWS) {
  shared$LWS.ReflectApply(ElementProtoInnerHTMLSetter$LWS, el$LWS, [html$LWS]);
}

function ElementOuterHTMLGetter$LWS(el$LWS) {
  return shared$LWS.ReflectApply(ElementProtoOuterHTMLGetter$LWS, el$LWS, []);
}

function ElementQuerySelector$LWS(el$LWS, selectors$LWS) {
  return shared$LWS.ReflectApply(ElementProtoQuerySelector$LWS, el$LWS, [selectors$LWS]);
}

function ElementGetAttribute$LWS(el$LWS, attrName$LWS) {
  return shared$LWS.ReflectApply(ElementProtoGetAttribute$LWS, el$LWS, [attrName$LWS]);
}

function ElementGetAttributeNode$LWS(el$LWS, attrName$LWS) {
  return shared$LWS.ReflectApply(ElementProtoGetAttributeNode$LWS, el$LWS, [attrName$LWS]);
}

function ElementGetAttributeNodeNS$LWS(el$LWS, namespace$LWS, nodeName$LWS) {
  return shared$LWS.ReflectApply(ElementProtoGetAttributeNodeNS$LWS, el$LWS, [namespace$LWS, nodeName$LWS]);
}

function ElementHasAttribute$LWS(el$LWS, attrName$LWS) {
  return shared$LWS.ReflectApply(ElementProtoHasAttribute$LWS, el$LWS, [attrName$LWS]);
}

function ElementSetAttribute$LWS(el$LWS, name$LWS, value$LWS) {
  return shared$LWS.ReflectApply(ElementProtoSetAttribute$LWS, el$LWS, [name$LWS, value$LWS]);
}

function ElementSetAttributeNS$LWS(el$LWS, namespace$LWS, name$LWS, value$LWS) {
  return shared$LWS.ReflectApply(ElementProtoSetAttributeNS$LWS, el$LWS, [namespace$LWS, name$LWS, value$LWS]);
}

function ElementRemoveAttributeNode$LWS(el$LWS, attrNode$LWS) {
  return shared$LWS.ReflectApply(ElementProtoRemoveAttributeNode$LWS, el$LWS, [attrNode$LWS]);
}

function ElementGetNamespaceURI$LWS(el$LWS) {
  return shared$LWS.ReflectApply(ElementProtoGetNamespaceURI$LWS, el$LWS, []);
}

const HTMLTemplateElementProtoContentGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLTemplateElement.prototype, 'content');

function HTMLTemplateElementContentGetter$LWS(template$LWS) {
  return shared$LWS.ReflectApply(HTMLTemplateElementProtoContentGetter$LWS, template$LWS, []);
}

const {
  prototype: NodeProto$LWS
} = Node;
const {
  appendChild: NodeProtoAppendChild$LWS,
  cloneNode: NodeProtoCloneNode$LWS,
  isEqualNode: NodeProtoIsEqualNode$LWS
} = NodeProto$LWS;
const NodeProtoChildNodesGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'childNodes');
const NodeProtoFirstChildGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'firstChild');
const NodeProtoNodeNameGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'nodeName');
const NodeProtoOwnerDocumentGetter$LWS = shared$LWS.ObjectLookupOwnGetter(NodeProto$LWS, 'ownerDocument');

function NodeAppendChild$LWS(node$LWS, childNode$LWS) {
  return shared$LWS.ReflectApply(NodeProtoAppendChild$LWS, node$LWS, [childNode$LWS]);
}

function NodeChildNodesGetter$LWS(node$LWS) {
  return shared$LWS.ReflectApply(NodeProtoChildNodesGetter$LWS, node$LWS, []);
}

function NodeClone$LWS(node$LWS, deep$LWS = false) {
  return shared$LWS.ReflectApply(NodeProtoCloneNode$LWS, node$LWS, [deep$LWS]);
}

function NodeFirstChildGetter$LWS(node$LWS) {
  return shared$LWS.ReflectApply(NodeProtoFirstChildGetter$LWS, node$LWS, []);
}

function NodeIsEqualNode$LWS(node$LWS, otherNode$LWS) {
  return shared$LWS.ReflectApply(NodeProtoIsEqualNode$LWS, node$LWS, [otherNode$LWS]);
}

function NodeNameGetter$LWS(node$LWS) {
  // Normalize nodeName to upper case.
  // See https://johnresig.com/blog/nodename-case-sensitivity/.
  return shared$LWS.StringToUpperCase(shared$LWS.ReflectApply(NodeProtoNodeNameGetter$LWS, node$LWS, []));
}

function NodeOwnerDocumentGetter$LWS(node$LWS) {
  return shared$LWS.ReflectApply(NodeProtoOwnerDocumentGetter$LWS, node$LWS, []);
}

const globalObjectToValidatorMap$LWS = new shared$LWS.WeakMapCtor();
const documentPattern$LWS = 'document';
const windowPattern$LWS = 'document\\.defaultView|frames|globalThis|self|window';
const webpackGlobalPattern$LWS = `${windowPattern$LWS}|global`;
const webpackGlobalDocumentPattern$LWS = `${documentPattern$LWS}|global.document`;
const locationReferencesRegExp$LWS = createPropertyReferenceRegExp$LWS(`${documentPattern$LWS}|${windowPattern$LWS}`, 'location');
const locationReferencesWithWebPackRegExp$LWS = createPropertyReferenceRegExp$LWS(`${webpackGlobalDocumentPattern$LWS}|${webpackGlobalPattern$LWS}`, 'location');
const sandboxEvalContextNameRegExp$LWS = new RegExp(`\\b${shared$LWS.escapeRegExp(shared$LWS.SANDBOX_EVAL_CONTEXT_NAME)}\\b`);
const webpackRequireNameRegExp$LWS = new RegExp(`\\b${shared$LWS.escapeRegExp(shared$LWS.WEBPACK_REQUIRE_NAME)}\\b`);

function createPropertyReferenceRegExp$LWS(objectPattern$LWS, key$LWS) {
  // An assignment operator is defined by
  // https://tc39.es/ecma262/#prod-AssignmentOperator
  // as one of the following:
  //     *= /= %= += -= <<= >>= >>>= &= ^= |= **=
  return new RegExp(`\\b(?:${objectPattern$LWS})\\.${key$LWS}(\\s*(?:[?*/%&^|+-]|>>>?|<<)*=(?=[^=]))?`, 'g');
}

function deepIsEqualNode$LWS(leftRoot$LWS, rightRoot$LWS) {
  const leftRootNode$LWS = leftRoot$LWS instanceof HTMLTemplateElement ? HTMLTemplateElementContentGetter$LWS(leftRoot$LWS) : leftRoot$LWS;
  const rightRootNode$LWS = rightRoot$LWS instanceof HTMLTemplateElement ? HTMLTemplateElementContentGetter$LWS(rightRoot$LWS) : rightRoot$LWS;

  if (NodeIsEqualNode$LWS(leftRootNode$LWS, rightRootNode$LWS)) {
    const leftChildNodes$LWS = NodeChildNodesGetter$LWS(leftRootNode$LWS);
    const childCount$LWS = leftChildNodes$LWS.length;

    if (childCount$LWS > 0) {
      const rightChildNodes$LWS = NodeChildNodesGetter$LWS(rightRootNode$LWS);

      for (let i$LWS = 0; i$LWS < childCount$LWS; i$LWS += 1) {
        if (deepIsEqualNode$LWS(leftChildNodes$LWS[i$LWS], rightChildNodes$LWS[i$LWS]) === false) {
          return false;
        }
      }
    }

    return true;
  }

  return false;
}
/* eslint no-underscore-dangle: ['error',{allowAfterThis:true}] */


class Validator$LWS {
  constructor(globalObject$LWS) {
    this.isEqualDomString = (leftString$LWS, rightString$LWS) => {
      ElementInnerHTMLSetter$LWS(this._templates.left, leftString$LWS);
      ElementInnerHTMLSetter$LWS(this._templates.right, rightString$LWS);
      return deepIsEqualNode$LWS(this._templates.left, this._templates.right);
    };

    this.isSharedElement = element$LWS => element$LWS === DocumentHeadGetter$LWS(this._document) || element$LWS === DocumentBodyGetter$LWS(this._document) || element$LWS === DocumentDocumentElementGetter$LWS(this._document);

    this.isAllowedSharedElementChild = element$LWS => element$LWS instanceof this._constructors.HTMLLinkElement || element$LWS instanceof this._constructors.HTMLScriptElement;

    this.isMediaSourceObject = object$LWS => // MediaSource may not be defined in some browsers
    this._constructors.MediaSource && object$LWS instanceof this._constructors.MediaSource;

    const {
      document: document$LWS,
      HTMLLinkElement: HTMLLinkElement$LWS,
      HTMLScriptElement: HTMLScriptElement$LWS,
      MediaSource: MediaSource$LWS
    } = globalObject$LWS;
    this._constructors = {
      HTMLLinkElement: HTMLLinkElement$LWS,
      HTMLScriptElement: HTMLScriptElement$LWS,
      MediaSource: MediaSource$LWS
    };
    this._document = document$LWS;
    this._templates = {
      left: DocumentCreateElement$LWS(this._document, 'template'),
      right: DocumentCreateElement$LWS(this._document, 'template')
    };
  }

}

function getValidator$LWS(globalObject$LWS) {
  let validator$LWS = shared$LWS.WeakMapGet(globalObjectToValidatorMap$LWS, globalObject$LWS);

  if (validator$LWS === undefined) {
    validator$LWS = new Validator$LWS(globalObject$LWS);
    shared$LWS.WeakMapSet(globalObjectToValidatorMap$LWS, globalObject$LWS, validator$LWS);
  }

  return validator$LWS;
}

function transformUncompiledSource$LWS(source$LWS) {
  // To avoid conflicts with anyone else using SANDBOX_EVAL_CONTEXT_NAME,
  // we sniff the source code to see if it is present, and in that case we
  // don't proceed with the string replacement.
  if (shared$LWS.RegExpTest(sandboxEvalContextNameRegExp$LWS, source$LWS)) {
    return source$LWS;
  }

  const destructuredBlueHelpers$LWS = []; // Input `source` is uncompiled, so `window.location` returns `null` inside
  // the detached iframe sandbox. Our compiler solves this problem by transforming
  // the red `location` reference into a blue `location` reference. The solution
  // below emulates what our compiler does, but using a simple string replacement.

  let locationTransformed$LWS = false;
  source$LWS = shared$LWS.StringReplace(source$LWS, // RegExp.prototype[Symbol.replace] resets the lastIndex of global
  // regexp to 0.
  // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
  shared$LWS.RegExpTest(webpackRequireNameRegExp$LWS, source$LWS) ? locationReferencesWithWebPackRegExp$LWS : locationReferencesRegExp$LWS, (_match$LWS, assignmentOperator$LWS) => {
    locationTransformed$LWS = true;
    return assignmentOperator$LWS ? `${shared$LWS.UNCOMPILED_LOCATION_NAME}.href${assignmentOperator$LWS}` : shared$LWS.UNCOMPILED_LOCATION_NAME;
  });

  if (locationTransformed$LWS) {
    destructuredBlueHelpers$LWS[destructuredBlueHelpers$LWS.length] = shared$LWS.UNCOMPILED_LOCATION_NAME;
  }

  if (destructuredBlueHelpers$LWS.length) {
    source$LWS = `const {
            ${shared$LWS.ArrayJoin(destructuredBlueHelpers$LWS, ',')}} = ${shared$LWS.SANDBOX_EVAL_CONTEXT_NAME};${source$LWS}`;
  }

  return source$LWS;
}

const BlobProtoSizeGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Blob.prototype, 'size');
const {
  slice: BlobProtoSlice$LWS
} = Blob.prototype;
const BlobProtoTypeGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Blob.prototype, 'type');
const BlobCtor$LWS = Blob;

function BlobSizeGetter$LWS(blob$LWS) {
  return shared$LWS.ReflectApply(BlobProtoSizeGetter$LWS, blob$LWS, []);
}

function BlobSlice$LWS(blob$LWS, ...args$LWS) {
  return shared$LWS.ReflectApply(BlobProtoSlice$LWS, blob$LWS, args$LWS);
}

function BlobTypeGetter$LWS(blob$LWS) {
  return shared$LWS.StringToLowerCase(shared$LWS.ReflectApply(BlobProtoTypeGetter$LWS, blob$LWS, []));
}

const SEEN_OBJECTS_MAP$LWS = new shared$LWS.MapCtor();

function cloneBoxedPrimitive$LWS(object$LWS) {
  return shared$LWS.ObjectCtor(shared$LWS.getNearMembraneSerializedValue(object$LWS));
}

function cloneMap$LWS(map$LWS, queue$LWS) {
  // Section 2.7.3 StructuredSerializeInternal:
  // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
  // Step 26.1.1: Let copiedList be a new empty List.
  const clone$LWS = new shared$LWS.MapCtor(); // Step 26.1.2: For each Record { [[Key]], [[Value]] } entry of value.[[MapData]]...

  const entriesIterable$LWS = shared$LWS.MapEntries(map$LWS); // Step 26.1.3 For each Record { [[Key]], [[Value]] } entry of copiedList:

  let {
    length: queueOffset$LWS
  } = queue$LWS; // eslint-disable-next-line no-constant-condition

  while (true) {
    const {
      done: done$LWS,
      value: subKeyValuePair$LWS
    } = entriesIterable$LWS.next();

    if (done$LWS) {
      break;
    }

    const {
      0: subKey$LWS,
      1: subValue$LWS
    } = subKeyValuePair$LWS;
    let subCloneKey$LWS; // Step 26.1.3.1: Let serializedKey be ? StructuredSerializeInternal(entry.[[Key]], forStorage, memory).

    queue$LWS[queueOffset$LWS++] = [subClone$LWS => {
      subCloneKey$LWS = subClone$LWS;
    }, subKey$LWS]; // Step 26.1.3.2: Let serializedValue be ? StructuredSerializeInternal(entry.[[Value]], forStorage, memory).

    queue$LWS[queueOffset$LWS++] = [subCloneValue$LWS => {
      shared$LWS.MapSet(clone$LWS, subCloneKey$LWS, subCloneValue$LWS);
    }, subValue$LWS];
  }

  return clone$LWS;
}

function cloneRegExp$LWS(regexp$LWS) {
  const {
    flags: flags$LWS,
    source: source$LWS
  } = shared$LWS.JSONParse(shared$LWS.getNearMembraneSerializedValue(regexp$LWS));
  return new shared$LWS.RegExpCtor(source$LWS, flags$LWS);
}

function cloneSet$LWS(set$LWS, queue$LWS) {
  // Section 2.7.3 StructuredSerializeInternal:
  // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
  // Step 26.2.1: Let copiedList be a new empty List.
  const clone$LWS = new shared$LWS.SetCtor(); // Step 26.2.2: For each entry of value.[[SetData]]...

  const valuesIterable$LWS = shared$LWS.SetValues(set$LWS); // Step 26.2.3: For each entry of copiedList:

  let {
    length: queueOffset$LWS
  } = queue$LWS; // eslint-disable-next-line no-constant-condition

  while (true) {
    const {
      done: done$LWS,
      value: subValue$LWS
    } = valuesIterable$LWS.next();

    if (done$LWS) {
      break;
    } // Step 26.2.3.1: Let serializedEntry be ? StructuredSerializeInternal(entry, forStorage, memory).


    queue$LWS[queueOffset$LWS++] = [subCloneValue$LWS => {
      shared$LWS.SetAdd(clone$LWS, subCloneValue$LWS);
    }, subValue$LWS];
  }

  return clone$LWS;
}

function enqueue$LWS(queue$LWS, originalValue$LWS, cloneValue$LWS) {
  // Section 2.7.3 StructuredSerializeInternal:
  // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
  // Step 26.4: Otherwise, for each key in ! EnumerableOwnPropertyNames(value, key)...
  // Note: Object.keys() performs EnumerableOwnPropertyNames() internally as
  // defined in ECMA262:
  // https://tc39.es/ecma262/#sec-object.keys
  const keys$LWS = shared$LWS.ObjectKeys(originalValue$LWS);
  let {
    length: queueOffset$LWS
  } = queue$LWS;

  for (let i$LWS = 0, {
    length: length$LWS
  } = keys$LWS; i$LWS < length$LWS; i$LWS += 1) {
    // Step 26.4.1.1: Let inputValue be ? value.[[Get]](key, value).
    // The [[Get]] operation is defined in ECMA262 for ordinary objects,
    // argument objects, integer-indexed exotic objects, module namespace
    // objects, and proxy objects.
    // https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver
    const key$LWS = keys$LWS[i$LWS];
    const subValue$LWS = originalValue$LWS[key$LWS];
    queue$LWS[queueOffset$LWS++] = [subCloneValue$LWS => {
      // Step 26.4.1.3: Property descriptor attributes are not
      // preserved during deserialization because only keys and
      // values are captured in serialized.[[Properties]].
      cloneValue$LWS[key$LWS] = subCloneValue$LWS;
    }, subValue$LWS];
  }
} // This function is the unguarded internal variant of `partialStructuredClone()`.
// Any error thrown that is captured by `partialStructuredClone()` is treated as
// a `DataCloneError`. This function clones blue membrane proxied arrays, plain
// objects, maps, regexps, sets, and boxed primitives. The following non-membrane
// proxied objects are set by reference instead of cloning:
//   ArrayBuffer
//   BigInt64Array
//   BigUint64Array
//   Blob
//   DataView
//   Date
//   DOMException
//   DOMMatrix
//   DOMMatrixReadOnly
//   DOMPoint
//   DOMPointReadOnly
//   DOMQuad
//   DOMRect
//   DOMRectReadOnly
//   Error
//   EvalError
//   File
//   FileList
//   Float32Array
//   Float64Array
//   ImageBitMap
//   ImageData
//   Int8Array
//   Int16Array
//   Int32Array
//   RangeError
//   ReferenceError
//   SyntaxError
//   TypeError
//   Uint8Array
//   Uint8ClampedArray
//   Uint16Array
//   Uint32Array
//   URIError
//
// Note:
// This function performs brand checks using `Object.prototype.toString`. The
// results can be faked with `Symbol.toStringTag` property values and are a poor
// substitute for native internal slot checks. However, for our purposes they
// are perfectly fine and avoid having to repeatedly walk the prototype of proxied
// values. Cloned values should be passed to native methods, like `postMessage()`,
// which perform their own validation with internal slot checks.


function partialStructuredCloneInternal$LWS(value$LWS) {
  // Using a queue instead of recursive function calls avoids call stack limits
  // and enables cloning more complex and deeply nested objects.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Too_much_recursion
  let result$LWS;
  const queue$LWS = [[subClone$LWS => {
    result$LWS = subClone$LWS;
  }, value$LWS]]; // eslint-disable-next-line no-labels

  queueLoop: while (queue$LWS.length) {
    // Section 2.7.3 StructuredSerializeInternal:
    // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
    // prettier-ignore
    const {
      0: setter$LWS,
      1: originalValue$LWS
    } = shared$LWS.ArrayShift(queue$LWS); // Step 4: If Type(value) is Undefined, Null, Boolean, Number, BigInt, or String

    if (originalValue$LWS === null || originalValue$LWS === undefined || typeof originalValue$LWS === 'boolean' || typeof originalValue$LWS === 'number' || typeof originalValue$LWS === 'string' || typeof originalValue$LWS === 'bigint') {
      setter$LWS(originalValue$LWS); // eslint-disable-next-line no-continue, no-extra-label, no-labels

      continue queueLoop;
    } // Step 5: If Type(value) is Symbol, then throw a 'DataCloneError' DOMException.


    if (typeof originalValue$LWS === 'symbol') {
      // Stop cloning and set the original value and defer throwing to
      // native methods.
      setter$LWS(originalValue$LWS); // eslint-disable-next-line no-extra-label, no-labels

      break queueLoop;
    } // To support circular references check if the original value has been
    // seen. If it has then use the clone associated with its record instead
    // of creating a new clone.


    let cloneValue$LWS = shared$LWS.MapGet(SEEN_OBJECTS_MAP$LWS, originalValue$LWS);

    if (cloneValue$LWS) {
      setter$LWS(cloneValue$LWS); // eslint-disable-next-line no-continue, no-extra-label, no-labels

      continue queueLoop;
    } // Perform a brand check on originalValue.


    const brand$LWS = shared$LWS.getBrand(originalValue$LWS); // eslint-disable-next-line default-case

    switch (brand$LWS) {
      // Step 19: Otherwise, if value is a platform object...
      case shared$LWS.TO_STRING_BRAND_OBJECT:
        {
          const proto$LWS = shared$LWS.ReflectGetPrototypeOf(originalValue$LWS);

          if (proto$LWS === shared$LWS.ObjectProto || proto$LWS === null) {
            cloneValue$LWS = {}; // Step 19.4: Set deep to true.

            enqueue$LWS(queue$LWS, originalValue$LWS, cloneValue$LWS);
          }

          break;
        }
      // Step 18: Otherwise, if value is an Array exotic object...

      case shared$LWS.TO_STRING_BRAND_ARRAY:
        // Step 18.1 Let valueLenDescriptor be ? OrdinaryGetOwnProperty(value, 'length').
        // Note: Rather than perform the more complex OrdinaryGetOwnProperty()
        // operation for 'length' because it is a non-configurable property
        // we can access it with the simpler [[Get]]() operation defined
        // in ECMA262.
        // https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-get-p-receiver
        cloneValue$LWS = new shared$LWS.ArrayCtor(originalValue$LWS.length); // Step 18.4: Set deep to true.

        enqueue$LWS(queue$LWS, originalValue$LWS, cloneValue$LWS);
        break;
      // Step 15: Otherwise, if value has [[MapData]] internal slot...
      // Step 15.2: Set deep to true.

      case shared$LWS.TO_STRING_BRAND_MAP:
        cloneValue$LWS = cloneMap$LWS(originalValue$LWS, queue$LWS);
        break;
      // Step 16: Otherwise, if value has [[SetData]] internal slot...
      // Step 16.2: Set deep to true.

      case shared$LWS.TO_STRING_BRAND_SET:
        cloneValue$LWS = cloneSet$LWS(originalValue$LWS, queue$LWS);
        break;
    }

    if (cloneValue$LWS === undefined) {
      if (!shared$LWS.isNearMembrane(originalValue$LWS)) {
        // Skip cloning non-membrane proxied objects.
        shared$LWS.MapSet(SEEN_OBJECTS_MAP$LWS, originalValue$LWS, originalValue$LWS);
        setter$LWS(originalValue$LWS); // eslint-disable-next-line no-extra-label, no-labels

        continue queueLoop;
      } // Cases ordered by a guestimate on frequency of encounter.
      // eslint-disable-next-line default-case


      switch (brand$LWS) {
        // Step 12: Otherwise, if value has a [[RegExpMatcher]] internal slot...
        case shared$LWS.TO_STRING_BRAND_REG_EXP:
          cloneValue$LWS = cloneRegExp$LWS(originalValue$LWS);
          break;
        // Step 7: If value has a [[BooleanData]] internal slot...

        case shared$LWS.TO_STRING_BRAND_BOOLEAN: // Step 8: Otherwise, if value has a [[NumberData]] internal slot...
        // eslint-disable-next-line no-fallthrough

        case shared$LWS.TO_STRING_BRAND_NUMBER: // Step 9: Otherwise, if value has a [[BigIntData]] internal slot...
        // eslint-disable-next-line no-fallthrough

        case shared$LWS.TO_STRING_BRAND_BIG_INT: // Step 10: Otherwise, if value has a [[StringData]] internal slot...
        // eslint-disable-next-line no-fallthrough

        case shared$LWS.TO_STRING_BRAND_STRING:
          cloneValue$LWS = cloneBoxedPrimitive$LWS(originalValue$LWS);
          break;
      }
    } // Step 21: Otherwise, if IsCallable(value) is true, then throw a 'DataCloneError'
    // Step 20: Otherwise, if value is a platform object, then throw a 'DataCloneError'


    if (cloneValue$LWS === undefined) {
      // Stop cloning and set the original value and defer throwing to
      // native methods.
      setter$LWS(originalValue$LWS); // eslint-disable-next-line no-extra-label, no-labels

      break queueLoop;
    }

    shared$LWS.MapSet(SEEN_OBJECTS_MAP$LWS, originalValue$LWS, cloneValue$LWS);
    setter$LWS(cloneValue$LWS);
  }

  return result$LWS;
}

function partialStructuredClone$LWS(value$LWS) {
  let result$LWS = value$LWS;

  try {
    result$LWS = partialStructuredCloneInternal$LWS(value$LWS); // eslint-disable-next-line no-empty
  } catch (_unused$LWS) {}

  shared$LWS.MapClear(SEEN_OBJECTS_MAP$LWS);
  return result$LWS;
}

const {
  getElementById: DocumentFragmentProtoGetElementById$LWS,
  querySelector: DocumentFragmentProtoQuerySelector$LWS
} = DocumentFragment.prototype;

function DocumentFragmentGetElementById$LWS(fragment$LWS, id$LWS) {
  return shared$LWS.ReflectApply(DocumentFragmentProtoGetElementById$LWS, fragment$LWS, [id$LWS]);
}

function DocumentFragmentQuerySelector$LWS(doc$LWS, value$LWS) {
  return shared$LWS.ReflectApply(DocumentFragmentProtoQuerySelector$LWS, doc$LWS, [value$LWS]);
}

const {
  createDocument: DOMImplementationProtoCreateDocument$LWS
} = DOMImplementation.prototype;

function DOMImplementationCreateDocument$LWS(domImplementation$LWS, ...args$LWS) {
  return shared$LWS.ReflectApply(DOMImplementationProtoCreateDocument$LWS, domImplementation$LWS, args$LWS);
}

const DOMTokenListProtoValueGetter$LWS = shared$LWS.ObjectLookupOwnGetter(DOMTokenList.prototype, 'value');

function DOMTokenListValueGetter$LWS(tokenList$LWS) {
  return shared$LWS.ReflectApply(DOMTokenListProtoValueGetter$LWS, tokenList$LWS, []);
}

const EventProtoCurrentTargetGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Event.prototype, 'currentTarget');

function EventCurrentTargetGetter$LWS(event$LWS) {
  return shared$LWS.ReflectApply(EventProtoCurrentTargetGetter$LWS, event$LWS, []);
}

const {
  addEventListener: EventTargetProtoAddEventListener$LWS
} = EventTarget.prototype;

function EventTargetAddEventListener$LWS(target$LWS, ...args$LWS) {
  return shared$LWS.ReflectApply(EventTargetProtoAddEventListener$LWS, target$LWS, args$LWS);
}

const HTMLAnchorElementProtoHostnameGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLAnchorElement.prototype, 'hostname');
const {
  get: HTMLAnchorElementProtoHrefGetter$LWS,
  set: HTMLAnchorElementProtoHrefSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(HTMLAnchorElement.prototype, 'href');
const HTMLAnchorElementProtoPathnameGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLAnchorElement.prototype, 'pathname');
const HTMLAnchorElementProtoProtocolGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLAnchorElement.prototype, 'protocol');

function HTMLAnchorElementHostnameGetter$LWS(anchor$LWS) {
  return shared$LWS.ReflectApply(HTMLAnchorElementProtoHostnameGetter$LWS, anchor$LWS, []);
}

function HTMLAnchorElementHrefGetter$LWS(anchor$LWS) {
  return shared$LWS.ReflectApply(HTMLAnchorElementProtoHrefGetter$LWS, anchor$LWS, []);
}

function HTMLAnchorElementHrefSetter$LWS(anchor$LWS, href$LWS) {
  shared$LWS.ReflectApply(HTMLAnchorElementProtoHrefSetter$LWS, anchor$LWS, [href$LWS]);
}

function HTMLAnchorElementPathnameGetter$LWS(anchor$LWS) {
  return shared$LWS.ReflectApply(HTMLAnchorElementProtoPathnameGetter$LWS, anchor$LWS, []);
}

function HTMLAnchorElementProtocolGetter$LWS(anchor$LWS) {
  return shared$LWS.ReflectApply(HTMLAnchorElementProtoProtocolGetter$LWS, anchor$LWS, []);
}

const HTMLElementProtoDatasetGetter$LWS = shared$LWS.ObjectLookupOwnGetter(HTMLElement.prototype, 'dataset');

function HTMLElementDatasetGetter$LWS(el$LWS) {
  return shared$LWS.ReflectApply(HTMLElementProtoDatasetGetter$LWS, el$LWS, []);
}

const HTMLIFrameElementProtoSrcSetter$LWS = shared$LWS.ObjectLookupOwnSetter(HTMLIFrameElement.prototype, 'src');

function HTMLIFrameElementSrcSetter$LWS(iframe$LWS, src$LWS) {
  shared$LWS.ReflectApply(HTMLIFrameElementProtoSrcSetter$LWS, iframe$LWS, [src$LWS]);
}

const {
  get: HTMLScriptElementProtoSrcGetter$LWS,
  set: HTMLScriptElementProtoSrcSetter$LWS
} = shared$LWS.ReflectGetOwnPropertyDescriptor(HTMLScriptElement.prototype, 'src');
const NAMESPACE_DEFAULT$LWS = 'default';
const NAMESPACE_SVG$LWS = 'http://www.w3.org/2000/svg';
const NAMESPACE_XHTML$LWS = 'http://www.w3.org/1999/xhtml';
const NAMESPACE_XLINK$LWS = 'http://www.w3.org/1999/xlink';
const {
  createContextualFragment: RangeProtoCreateContextualFragment$LWS
} = Range.prototype;
const RequestProtoURLGetter$LWS = shared$LWS.ObjectLookupOwnGetter(Request.prototype, 'url'); // This has to be done 1-by-1 because putting a full file ignore in this file will result in
// dist/index.js containing the directive and subsequently being ignored.
// istanbul ignore next

function RequestURLGetter$LWS(request$LWS) {
  return shared$LWS.ReflectApply(RequestProtoURLGetter$LWS, request$LWS, []);
}

const {
  key: StorageProtoKey$LWS,
  getItem: StorageProtoGetItem$LWS,
  removeItem: StorageProtoRemoveItem$LWS,
  setItem: StorageProtoSetItem$LWS
} = Storage.prototype;
const SVGElementProtoDatasetGetter$LWS = shared$LWS.ObjectLookupOwnGetter(SVGElement.prototype, 'dataset');

function SVGElementDatasetGetter$LWS(svg$LWS) {
  return shared$LWS.ReflectApply(SVGElementProtoDatasetGetter$LWS, svg$LWS, []);
}

const {
  createObjectURL: URLCreateObjectURL$LWS,
  revokeObjectURL: URLRevokeObjectURL$LWS
} = URL;
const ALLOW_LIST_PATCHED$LWS = ['opener', 'parent'];
const ALLOW_LIST_RAW$LWS = ['close', 'closed', 'focus'];
const DEFAULT_OVERWRITTEN_VALUE$LWS = {};
const rawToPatchedWindowMap$LWS = new shared$LWS.WeakMapCtor(); // These properties are part of the WindowOrGlobalScope mixin and not on
// Window.prototype.
// https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope

const {
  clearInterval: WindowStaticClearInterval$LWS,
  setInterval: WindowStaticSetInterval$LWS
} = window;
const WindowStaticLengthGetter$LWS = shared$LWS.ObjectLookupOwnGetter(window, 'length');
const WindowStaticSelfGetter$LWS = shared$LWS.ObjectLookupOwnGetter(window, 'self');
const {
  decodeURIComponent: WindowDecodeURIComponent$LWS,
  encodeURIComponent: WindowEncodeURIComponent$LWS
} = window; // istanbul ignore next

function createPatchedWindow$LWS(win$LWS) {
  const patchedWindow$LWS = {};

  for (let i$LWS = 0, {
    length: length$LWS
  } = ALLOW_LIST_RAW$LWS; i$LWS < length$LWS; i$LWS += 1) {
    const key$LWS = ALLOW_LIST_RAW$LWS[i$LWS];
    const unsafeDesc$LWS = shared$LWS.ReflectGetOwnPropertyDescriptor(win$LWS, key$LWS);

    if (unsafeDesc$LWS) {
      const safeDesc$LWS = shared$LWS.toSafeDescriptor(unsafeDesc$LWS);
      const {
        value: originalValue$LWS
      } = safeDesc$LWS;

      if (typeof originalValue$LWS === 'function') {
        const bound$LWS = shared$LWS.FunctionBind(originalValue$LWS, win$LWS);
        const unsafeNameDesc$LWS = shared$LWS.ReflectGetOwnPropertyDescriptor(originalValue$LWS, 'name');

        if (unsafeNameDesc$LWS) {
          shared$LWS.ReflectDefineProperty(bound$LWS, 'name', shared$LWS.toSafeDescriptor(unsafeNameDesc$LWS));
        }

        unsafeDesc$LWS.value = bound$LWS;
      } else {
        const {
          get: getter$LWS,
          set: setter$LWS
        } = safeDesc$LWS;
        let overwrittenValue$LWS = DEFAULT_OVERWRITTEN_VALUE$LWS;

        if (typeof getter$LWS === 'function') {
          safeDesc$LWS.get = function get$LWS() {
            return overwrittenValue$LWS === DEFAULT_OVERWRITTEN_VALUE$LWS ? shared$LWS.ReflectApply(getter$LWS, win$LWS, []) : overwrittenValue$LWS;
          };
        }

        if (typeof setter$LWS === 'function') {
          safeDesc$LWS.set = function set$LWS(value$LWS) {
            overwrittenValue$LWS = value$LWS;
          };
        }
      }

      shared$LWS.ReflectDefineProperty(patchedWindow$LWS, key$LWS, safeDesc$LWS);
    }
  }

  for (let i$LWS = 0, {
    length: length$LWS
  } = ALLOW_LIST_PATCHED$LWS; i$LWS < length$LWS; i$LWS += 1) {
    const key$LWS = ALLOW_LIST_PATCHED$LWS[i$LWS];
    const unsafeDesc$LWS = shared$LWS.ReflectGetOwnPropertyDescriptor(win$LWS, key$LWS);

    if (unsafeDesc$LWS) {
      const safeDesc$LWS = shared$LWS.toSafeDescriptor(unsafeDesc$LWS);
      const {
        get: getter$LWS,
        set: setter$LWS
      } = safeDesc$LWS;
      let overwrittenValue$LWS = DEFAULT_OVERWRITTEN_VALUE$LWS;

      if (typeof getter$LWS === 'function') {
        safeDesc$LWS.get = function get$LWS() {
          if (overwrittenValue$LWS === DEFAULT_OVERWRITTEN_VALUE$LWS) {
            return getPatchedWindow$LWS(shared$LWS.ReflectApply(getter$LWS, win$LWS, []));
          }

          return overwrittenValue$LWS;
        };
      }

      if (typeof setter$LWS === 'function') {
        safeDesc$LWS.set = function set$LWS(value$LWS) {
          overwrittenValue$LWS = value$LWS;
        };
      }

      shared$LWS.ReflectDefineProperty(patchedWindow$LWS, key$LWS, safeDesc$LWS);
    }
  }

  const unsafePostMessageDesc$LWS = shared$LWS.ReflectGetOwnPropertyDescriptor(win$LWS, 'postMessage');

  if (unsafePostMessageDesc$LWS) {
    const safeDesc$LWS = shared$LWS.toSafeDescriptor(unsafePostMessageDesc$LWS);
    safeDesc$LWS.value = getPatchedPostMessage$LWS(win$LWS);
    shared$LWS.ReflectDefineProperty(patchedWindow$LWS, 'postMessage', safeDesc$LWS);
  }

  return patchedWindow$LWS;
}

function getPatchedPostMessage$LWS(win$LWS) {
  const {
    postMessage: originalPostMessage$LWS
  } = win$LWS;
  return function postMessage$LWS(...args$LWS) {
    if (args$LWS.length) {
      // Structured clone all arguments so that `transfer` is referenced
      // correctly within `message`.
      args$LWS = partialStructuredClone$LWS(args$LWS);
    }

    return shared$LWS.ReflectApply(originalPostMessage$LWS, win$LWS, args$LWS);
  };
} // istanbul ignore next


function getPatchedWindow$LWS(win$LWS) {
  let patchedContentWindow$LWS = null;

  if (win$LWS) {
    patchedContentWindow$LWS = shared$LWS.WeakMapGet(rawToPatchedWindowMap$LWS, win$LWS);

    if (patchedContentWindow$LWS === undefined) {
      patchedContentWindow$LWS = createPatchedWindow$LWS(win$LWS);
      shared$LWS.WeakMapSet(rawToPatchedWindowMap$LWS, win$LWS, patchedContentWindow$LWS);
    }
  }

  return patchedContentWindow$LWS;
}

function isWindow$LWS(value$LWS) {
  // slower check that must certainly detect a window object
  try {
    // window.self getter only works for a window object, otherwise it throws,
    // additionally, this works fine for a detached window as well, which is
    // important since it will guarantee that this check works also for iframes
    // that are disconnected, and could be connected later on, that should not
    // bypass this check. This check is is also equivalent to window.frames, and
    // here is the very simple spec for this getter:
    // https://html.spec.whatwg.org/multipage/window-object.html#dom-self
    WindowSelfGetter$LWS(value$LWS);
    return true; // eslint-disable-next-line no-empty
  } catch (_unused2$LWS) {}

  return false;
}

function isWindowLike$LWS(value$LWS) {
  // fast check to narrow down when to do the slow check for window objects
  // window.top is unforgeable, this means this check should be safe from
  // user-intervention to try to bypass this check.
  return shared$LWS.ObjectHasOwnProperty(value$LWS, 'top');
}

function WindowClearInterval$LWS(win$LWS, intervalID$LWS) {
  return shared$LWS.ReflectApply(WindowStaticClearInterval$LWS, win$LWS, [intervalID$LWS]);
}

function WindowLengthGetter$LWS(win$LWS) {
  return shared$LWS.ReflectApply(WindowStaticLengthGetter$LWS, win$LWS, []);
}

function WindowSelfGetter$LWS(win$LWS) {
  return shared$LWS.ReflectApply(WindowStaticSelfGetter$LWS, win$LWS, []);
}

function WindowSetInterval$LWS(win$LWS, ...args$LWS) {
  return shared$LWS.ReflectApply(WindowStaticSetInterval$LWS, win$LWS, args$LWS);
} // This has to be done 1-by-1 because putting a full file ignore in this file will result in
// dist/index.js containing the directive and subsequently being ignored.
// istanbul ignore next


const XhrCtor$LWS = XMLHttpRequest;
const {
  prototype: XhrProto$LWS
} = XhrCtor$LWS;
const {
  send: XhrProtoSend$LWS
} = XhrProto$LWS;
const XhrProtoResponseTextGetter$LWS = shared$LWS.ObjectLookupOwnGetter(XhrProto$LWS, 'responseText');
const XhrProtoStatusGetter$LWS = shared$LWS.ObjectLookupOwnGetter(XhrProto$LWS, 'status');
const XhrProtoWithCredentialsSetter$LWS = shared$LWS.ObjectLookupOwnSetter(XhrProto$LWS, 'withCredentials'); // istanbul ignore next

const {
  open: XhrProtoOpen$LWS
} = XhrProto$LWS; // istanbul ignore next

function XhrOpen$LWS(xhr$LWS, requestMethod$LWS, url$LWS, async$LWS = true) {
  return shared$LWS.ReflectApply(XhrProtoOpen$LWS, xhr$LWS, [requestMethod$LWS, url$LWS, async$LWS]);
} // istanbul ignore next


function XhrResponseTextGetter$LWS(xhr$LWS) {
  return shared$LWS.ReflectApply(XhrProtoResponseTextGetter$LWS, xhr$LWS, []);
} // istanbul ignore next


function XhrSend$LWS(xhr$LWS) {
  return shared$LWS.ReflectApply(XhrProtoSend$LWS, xhr$LWS, []);
} // istanbul ignore next


function XhrStatusGetter$LWS(xhr$LWS) {
  return shared$LWS.ReflectApply(XhrProtoStatusGetter$LWS, xhr$LWS, []);
} // istanbul ignore next


function XhrWithCredentialsSetter$LWS(xhr$LWS, bool$LWS) {
  shared$LWS.ReflectApply(XhrProtoWithCredentialsSetter$LWS, xhr$LWS, [bool$LWS]);
}

exports.AttrNameGetter = AttrNameGetter$LWS;
exports.AttrNamespaceURIGetter = AttrNamespaceURIGetter$LWS;
exports.AttrOwnerElementGetter = AttrOwnerElementGetter$LWS;
exports.AttrValueGetter = AttrValueGetter$LWS;
exports.AttrValueSetter = AttrValueSetter$LWS;
exports.BlobCtor = BlobCtor$LWS;
exports.BlobSizeGetter = BlobSizeGetter$LWS;
exports.BlobSlice = BlobSlice$LWS;
exports.BlobTypeGetter = BlobTypeGetter$LWS;
exports.DOMImplementationCreateDocument = DOMImplementationCreateDocument$LWS;
exports.DOMTokenListValueGetter = DOMTokenListValueGetter$LWS;
exports.DocumentBodyGetter = DocumentBodyGetter$LWS;
exports.DocumentCookieGetter = DocumentCookieGetter$LWS;
exports.DocumentCookieSetter = DocumentCookieSetter$LWS;
exports.DocumentCreateComment = DocumentCreateComment$LWS;
exports.DocumentCreateElement = DocumentCreateElement$LWS;
exports.DocumentCreateElementNS = DocumentCreateElementNS$LWS;
exports.DocumentDocumentElementGetter = DocumentDocumentElementGetter$LWS;
exports.DocumentFragmentGetElementById = DocumentFragmentGetElementById$LWS;
exports.DocumentFragmentQuerySelector = DocumentFragmentQuerySelector$LWS;
exports.DocumentGetElementById = DocumentGetElementById$LWS;
exports.DocumentHeadGetter = DocumentHeadGetter$LWS;
exports.DocumentImplementation = DocumentImplementation$LWS;
exports.ElementClosest = ElementClosest$LWS;
exports.ElementGetAttribute = ElementGetAttribute$LWS;
exports.ElementGetAttributeNode = ElementGetAttributeNode$LWS;
exports.ElementGetAttributeNodeNS = ElementGetAttributeNodeNS$LWS;
exports.ElementGetNamespaceURI = ElementGetNamespaceURI$LWS;
exports.ElementHasAttribute = ElementHasAttribute$LWS;
exports.ElementInnerHTMLGetter = ElementInnerHTMLGetter$LWS;
exports.ElementInnerHTMLSetter = ElementInnerHTMLSetter$LWS;
exports.ElementOuterHTMLGetter = ElementOuterHTMLGetter$LWS;
exports.ElementProtoSetAttribute = ElementProtoSetAttribute$LWS;
exports.ElementProtoSetAttributeNS = ElementProtoSetAttributeNS$LWS;
exports.ElementQuerySelector = ElementQuerySelector$LWS;
exports.ElementRemoveAttributeNode = ElementRemoveAttributeNode$LWS;
exports.ElementSetAttribute = ElementSetAttribute$LWS;
exports.ElementSetAttributeNS = ElementSetAttributeNS$LWS;
exports.EventCurrentTargetGetter = EventCurrentTargetGetter$LWS;
exports.EventTargetAddEventListener = EventTargetAddEventListener$LWS;
exports.HTMLAnchorElementHostnameGetter = HTMLAnchorElementHostnameGetter$LWS;
exports.HTMLAnchorElementHrefGetter = HTMLAnchorElementHrefGetter$LWS;
exports.HTMLAnchorElementHrefSetter = HTMLAnchorElementHrefSetter$LWS;
exports.HTMLAnchorElementPathnameGetter = HTMLAnchorElementPathnameGetter$LWS;
exports.HTMLAnchorElementProtocolGetter = HTMLAnchorElementProtocolGetter$LWS;
exports.HTMLElementDatasetGetter = HTMLElementDatasetGetter$LWS;
exports.HTMLIFrameElementSrcSetter = HTMLIFrameElementSrcSetter$LWS;
exports.HTMLScriptElementProtoSrcGetter = HTMLScriptElementProtoSrcGetter$LWS;
exports.HTMLScriptElementProtoSrcSetter = HTMLScriptElementProtoSrcSetter$LWS;
exports.HTMLTemplateElementContentGetter = HTMLTemplateElementContentGetter$LWS;
exports.NAMESPACE_DEFAULT = NAMESPACE_DEFAULT$LWS;
exports.NAMESPACE_SVG = NAMESPACE_SVG$LWS;
exports.NAMESPACE_XHTML = NAMESPACE_XHTML$LWS;
exports.NAMESPACE_XLINK = NAMESPACE_XLINK$LWS;
exports.NodeAppendChild = NodeAppendChild$LWS;
exports.NodeChildNodesGetter = NodeChildNodesGetter$LWS;
exports.NodeClone = NodeClone$LWS;
exports.NodeFirstChildGetter = NodeFirstChildGetter$LWS;
exports.NodeIsEqualNode = NodeIsEqualNode$LWS;
exports.NodeNameGetter = NodeNameGetter$LWS;
exports.NodeOwnerDocumentGetter = NodeOwnerDocumentGetter$LWS;
exports.RangeProtoCreateContextualFragment = RangeProtoCreateContextualFragment$LWS;
exports.RequestURLGetter = RequestURLGetter$LWS;
exports.SVGElementDatasetGetter = SVGElementDatasetGetter$LWS;
exports.StorageProtoGetItem = StorageProtoGetItem$LWS;
exports.StorageProtoKey = StorageProtoKey$LWS;
exports.StorageProtoRemoveItem = StorageProtoRemoveItem$LWS;
exports.StorageProtoSetItem = StorageProtoSetItem$LWS;
exports.URLCreateObjectURL = URLCreateObjectURL$LWS;
exports.URLRevokeObjectURL = URLRevokeObjectURL$LWS;
exports.WindowClearInterval = WindowClearInterval$LWS;
exports.WindowDecodeURIComponent = WindowDecodeURIComponent$LWS;
exports.WindowEncodeURIComponent = WindowEncodeURIComponent$LWS;
exports.WindowLengthGetter = WindowLengthGetter$LWS;
exports.WindowSelfGetter = WindowSelfGetter$LWS;
exports.WindowSetInterval = WindowSetInterval$LWS;
exports.XhrCtor = XhrCtor$LWS;
exports.XhrOpen = XhrOpen$LWS;
exports.XhrResponseTextGetter = XhrResponseTextGetter$LWS;
exports.XhrSend = XhrSend$LWS;
exports.XhrStatusGetter = XhrStatusGetter$LWS;
exports.XhrWithCredentialsSetter = XhrWithCredentialsSetter$LWS;
exports.getPatchedPostMessage = getPatchedPostMessage$LWS;
exports.getPatchedWindow = getPatchedWindow$LWS;
exports.getValidator = getValidator$LWS;
exports.isWindow = isWindow$LWS;
exports.isWindowLike = isWindowLike$LWS;
exports.nsCookieKey = nsCookieKey$LWS;
exports.nsCookieRootKey = nsCookieRootKey$LWS;
exports.partialStructuredClone = partialStructuredClone$LWS;
exports.transformUncompiledSource = transformUncompiledSource$LWS;
/*! version: 0.15.16 */
