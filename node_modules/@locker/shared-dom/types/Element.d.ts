export declare const ElementProtoSetAttribute: (qualifiedName: string, value: string) => void, ElementProtoSetAttributeNS: (namespace: string | null, qualifiedName: string, value: string) => void;
export declare function ElementClosest(el: Element, selectors: string): ReturnType<typeof Element.prototype.closest>;
export declare function ElementInnerHTMLGetter(el: Element): typeof Element.prototype.innerHTML;
export declare function ElementInnerHTMLSetter(el: Element, html: string): void;
export declare function ElementOuterHTMLGetter(el: Element): typeof Element.prototype.outerHTML;
export declare function ElementQuerySelector(el: Element, selectors: string): ReturnType<typeof Element.prototype.querySelector>;
export declare function ElementGetAttribute(el: Element, attrName: string): ReturnType<typeof Element.prototype.getAttribute>;
export declare function ElementGetAttributeNode(el: Element, attrName: string): ReturnType<typeof Element.prototype.getAttributeNode>;
export declare function ElementGetAttributeNodeNS(el: Element, namespace: string, nodeName: string): ReturnType<typeof Element.prototype.getAttributeNodeNS>;
export declare function ElementHasAttribute(el: Element, attrName: string | null): ReturnType<typeof Element.prototype.hasAttribute>;
export declare function ElementSetAttribute(el: Element, name: string, value: string): ReturnType<typeof Element.prototype.setAttribute>;
export declare function ElementSetAttributeNS(el: Element, namespace: string, name: string, value: string): ReturnType<typeof Element.prototype.setAttributeNS>;
export declare function ElementRemoveAttributeNode(el: Element, attrNode: Attr): ReturnType<typeof Element.prototype.removeAttributeNode>;
export declare function ElementGetNamespaceURI(el: Element): typeof Element.prototype.namespaceURI;
//# sourceMappingURL=Element.d.ts.map