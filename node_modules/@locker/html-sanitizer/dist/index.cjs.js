/*!
 * Copyright (C) 2019 salesforce.com, inc.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var shared$LWS = require('@locker/shared');

var sharedDom$LWS = require('@locker/shared-dom');

var createDOMPurify$LWS = require('dompurify');

function _interopDefaultLegacy$LWS(e$LWS) {
  return e$LWS && typeof e$LWS === 'object' && 'default' in e$LWS ? e$LWS : {
    'default': e$LWS
  };
}

var createDOMPurify__default$LWS = /*#__PURE__*/_interopDefaultLegacy$LWS(createDOMPurify$LWS);

const ariaAttributes$LWS = ['aria-activedescendant', 'aria-atomic', 'aria-autocomplete', 'aria-busy', 'aria-checked', 'aria-controls', 'aria-describedby', 'aria-disabled', 'aria-readonly', 'aria-dropeffect', 'aria-expanded', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-disabled', 'aria-invalid', 'aria-label', 'aria-labelledby', 'aria-level', 'aria-live', 'aria-multiline', 'aria-multiselectable', 'aria-orientation', 'aria-owns', 'aria-posinset', 'aria-pressed', 'aria-readonly', 'aria-relevant', 'aria-required', 'aria-selected', 'aria-setsize', 'aria-sort', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext', 'role', 'target'];
const htmlTags$LWS = ['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'caption', 'canvas', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'datalist', 'dd', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'em', 'fieldset', 'figure', 'figcaption', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'i', 'iframe', 'img', 'input', 'ins', 'keygen', 'kbd', 'label', 'legend', 'li', 'map', 'mark', 'menu', 'meter', 'nav', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr'];
const svgTags$LWS = ['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern', 'use'];
const allTags$LWS = shared$LWS.ArrayConcat(svgTags$LWS, htmlTags$LWS); // generic, sanitizer attempts in place sanitization and returns node

const NODE_ALL_IN_PLACE$LWS = {
  ADD_ATTR: ariaAttributes$LWS,
  ALLOWED_TAGS: shared$LWS.ArrayConcat(allTags$LWS, '#document-fragment'),
  IN_PLACE: true
}; // use only svg tags, sanitizer returns a document fragment

const NODE_SVG$LWS = {
  ADD_ATTR: ariaAttributes$LWS,
  ALLOWED_TAGS: svgTags$LWS,
  RETURN_DOM_FRAGMENT: true,
  SANITIZE_DOM: false
}; // generic, sanitizer returns string

const STRING_ALL$LWS = {
  ADD_ATTR: ariaAttributes$LWS,
  ALLOWED_TAGS: allTags$LWS
}; // use only tags allowed for blob and file

const STRING_BLOB_HTML$LWS = {
  ADD_ATTR: ariaAttributes$LWS,
  ALLOWED_TAGS: shared$LWS.ArrayFilter(allTags$LWS, t$LWS => !shared$LWS.ArrayIncludes(['iframe'], t$LWS)),
  SANITIZE_DOM: false
};
var config$LWS = /*#__PURE__*/Object.freeze({
  __proto__: null,
  NODE_ALL_IN_PLACE: NODE_ALL_IN_PLACE$LWS,
  NODE_SVG: NODE_SVG$LWS,
  STRING_ALL: STRING_ALL$LWS,
  STRING_BLOB_HTML: STRING_BLOB_HTML$LWS
});
const instances$LWS = new shared$LWS.WeakMapCtor();

function sanitizer$LWS(config$LWS, hooks$LWS) {
  let dompurify$LWS = shared$LWS.WeakMapGet(instances$LWS, config$LWS);

  if (dompurify$LWS) {
    return dompurify$LWS;
  }

  dompurify$LWS = createDOMPurify__default$LWS["default"]();
  dompurify$LWS.setConfig(config$LWS);

  if (hooks$LWS) {
    shared$LWS.MapForEach(hooks$LWS, (cb$LWS, hookName$LWS) => {
      dompurify$LWS.addHook(hookName$LWS, cb$LWS);
    });
  }

  shared$LWS.WeakMapSet(instances$LWS, config$LWS, dompurify$LWS);
  return dompurify$LWS;
}

const ATTRIBUTES$LWS = ['href', 'xlink:href'];
const SANITIZER_HOOKS$LWS = new shared$LWS.MapCtor([['uponSanitizeAttribute', sanitizeHrefAttributeHook$LWS], ['uponSanitizeElement', allowCustomTagHook$LWS]]);
const URL_SCHEMES$LWS = ['http:', 'https:'];
const {
  document: document$LWS
} = window;
const htmlTemplate$LWS = sharedDom$LWS.DocumentCreateElement(document$LWS, 'template');
const normalizerAnchor$LWS = sharedDom$LWS.DocumentCreateElement(document$LWS, 'a'); // Queue for managing pending xhr requests.

const queue$LWS = new shared$LWS.SetCtor(); // The regexp is based on the WHATWG spec:
// https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
// However, DOMPurify sanitizes unicode characters (\u0000-\uFFFF) in tag name.

const customTagRegExp$LWS = /^[a-z]([-_.\w])*-([-.0-9_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u37D0\u37F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u10000-\uEFFFF])*/; // A regexp to find all non lowercase alphanumeric.

const urlReplacerRegExp$LWS = /[^a-z0-9]+/gi;

function checkExistingAndDequeue$LWS(container$LWS, normalizedHref$LWS) {
  if (shared$LWS.SetHas(queue$LWS, normalizedHref$LWS.normalizedUrl)) {
    const checkFn$LWS = () => {
      if (!shared$LWS.SetHas(queue$LWS, normalizedHref$LWS.normalizedUrl)) {
        updater$LWS(container$LWS, normalizedHref$LWS);
        sharedDom$LWS.WindowClearInterval(window, interval$LWS);
      }
    }; // Wait for request to finish, then update content.


    const interval$LWS = sharedDom$LWS.WindowSetInterval(window, checkFn$LWS, 50);
  } else {
    updater$LWS(container$LWS, normalizedHref$LWS);
  }
}

function createUrlContainer$LWS(url$LWS) {
  const container$LWS = sharedDom$LWS.DocumentCreateElement(document$LWS, 'div');
  sharedDom$LWS.ElementSetAttribute(container$LWS, 'style', 'display:none');
  sharedDom$LWS.ElementSetAttribute(container$LWS, 'id', url$LWS);
  const body$LWS = sharedDom$LWS.DocumentBodyGetter(document$LWS);
  sharedDom$LWS.NodeAppendChild(body$LWS, container$LWS);
  return container$LWS;
}

function fetchAndSanitize$LWS(normalizedHref$LWS) {
  // This is the first time we see this href.
  const container$LWS = createUrlContainer$LWS(normalizedHref$LWS.normalizedUrl); // Put the URL we're fetching in a queue.

  shared$LWS.SetAdd(queue$LWS, normalizedHref$LWS.normalizedUrl); // Initiate an XHR to fetch the resource.

  const xhr$LWS = new sharedDom$LWS.XhrCtor();
  sharedDom$LWS.EventTargetAddEventListener(xhr$LWS, 'load', () => {
    const status$LWS = sharedDom$LWS.XhrStatusGetter(xhr$LWS); // istanbul ignore next: the following is well tested via integration-karma

    if (status$LWS === 200) {
      // Retrieved content should be sanitized immediately.
      const fragment$LWS = sanitizeSvgTextReturnDOM$LWS(sharedDom$LWS.XhrResponseTextGetter(xhr$LWS)); // Look for the container again in case other requests have finished
      // earlier for the same URL.

      if (normalizedHref$LWS.requestedFragment) {
        const el$LWS = sharedDom$LWS.DocumentFragmentGetElementById(fragment$LWS, normalizedHref$LWS.requestedFragment);

        if (el$LWS) {
          sharedDom$LWS.ElementSetAttribute(el$LWS, 'id', normalizedHref$LWS.normalizedFragment);
        }
      }

      sharedDom$LWS.NodeAppendChild(container$LWS, fragment$LWS);
      shared$LWS.SetDelete(queue$LWS, normalizedHref$LWS.normalizedUrl);
    }
  });
  sharedDom$LWS.XhrOpen(xhr$LWS, 'GET', normalizedHref$LWS.requestedUrl);
  sharedDom$LWS.XhrSend(xhr$LWS);
}

function parseHref$LWS(url$LWS) {
  sharedDom$LWS.HTMLAnchorElementHrefSetter(normalizerAnchor$LWS, url$LWS);
  const href$LWS = sharedDom$LWS.HTMLAnchorElementHrefGetter(normalizerAnchor$LWS);
  const protocol$LWS = sharedDom$LWS.HTMLAnchorElementProtocolGetter(normalizerAnchor$LWS);
  const {
    0: requestedUrl$LWS,
    1: requestedFragment$LWS
  } = shared$LWS.StringSplit(href$LWS, '#');
  const normalizedUrl$LWS = shared$LWS.StringReplace(shared$LWS.StringToLowerCase(requestedUrl$LWS), urlReplacerRegExp$LWS, '');
  const normalizedFragment$LWS = requestedFragment$LWS ? `${normalizedUrl$LWS}_${shared$LWS.StringReplace(requestedFragment$LWS, urlReplacerRegExp$LWS, '')}` : '';
  return {
    normalizedFragment: normalizedFragment$LWS,
    normalizedUrl: normalizedUrl$LWS,
    protocol: protocol$LWS,
    requestedFragment: requestedFragment$LWS,
    requestedUrl: requestedUrl$LWS
  };
}

function updater$LWS(container$LWS, normalizedHref$LWS) {
  const {
    normalizedFragment: normalizedFragment$LWS,
    requestedFragment: requestedFragment$LWS
  } = normalizedHref$LWS;
  let el$LWS = sharedDom$LWS.ElementQuerySelector(container$LWS, `#${normalizedFragment$LWS}`);

  if (!el$LWS) {
    try {
      el$LWS = sharedDom$LWS.ElementQuerySelector(container$LWS, `#${requestedFragment$LWS}`);
      sharedDom$LWS.ElementSetAttribute(el$LWS, 'id', normalizedFragment$LWS);
    } catch (_unused$LWS) {// Catch all malformed CSS3 selectors.
      // getElementById not available on Node.
      // Cannot use document.getElementById because multiple containers may
      // have the same ids for svg elements.
    }
  }
}

function blobSanitizer$LWS() {
  return sanitizer$LWS(STRING_BLOB_HTML$LWS, SANITIZER_HOOKS$LWS);
}

function svgSanitizer$LWS() {
  return sanitizer$LWS(NODE_SVG$LWS, SANITIZER_HOOKS$LWS);
}

function sanitize$LWS(dirty$LWS) {
  sharedDom$LWS.ElementInnerHTMLSetter(htmlTemplate$LWS, dirty$LWS);
  const content$LWS = sharedDom$LWS.HTMLTemplateElementContentGetter(htmlTemplate$LWS);
  const sanitizer$1$LWS = sanitizer$LWS(NODE_ALL_IN_PLACE$LWS, SANITIZER_HOOKS$LWS);
  sanitizer$1$LWS.sanitize(content$LWS);
  return sharedDom$LWS.ElementInnerHTMLGetter(htmlTemplate$LWS);
}

function sanitizeDocument$LWS(doc$LWS) {
  const content$LWS = sharedDom$LWS.ElementOuterHTMLGetter(sharedDom$LWS.DocumentDocumentElementGetter(doc$LWS));
  const contentSanitized$LWS = sanitize$LWS(content$LWS);
  const newDoc$LWS = sharedDom$LWS.DOMImplementationCreateDocument(sharedDom$LWS.DocumentImplementation(doc$LWS), sharedDom$LWS.NAMESPACE_XHTML, 'html');
  sharedDom$LWS.ElementInnerHTMLSetter(sharedDom$LWS.DocumentDocumentElementGetter(newDoc$LWS), contentSanitized$LWS);
  return newDoc$LWS;
} // Sanitize a URL representing a SVG href attribute value.


function sanitizeHrefAttributeHook$LWS(node$LWS, data$LWS, _config$LWS) {
  const {
    attrValue: attrValue$LWS,
    attrName: attrName$LWS
  } = data$LWS;
  const nodeName$LWS = sharedDom$LWS.NodeNameGetter(node$LWS);

  if (attrValue$LWS && nodeName$LWS === 'USE' && shared$LWS.ArrayIncludes(ATTRIBUTES$LWS, attrName$LWS)) {
    data$LWS.attrValue = sanitizeSvgHref$LWS(attrValue$LWS);
  }

  return data$LWS;
}

function sanitizeSvgHref$LWS(url$LWS) {
  if (shared$LWS.StringStartsWith(url$LWS, '#')) {
    return url$LWS;
  }

  const normalizedHref$LWS = parseHref$LWS(url$LWS); // Sanitize only for supported URL_SCHEMES.

  if (shared$LWS.ArrayIncludes(URL_SCHEMES$LWS, normalizedHref$LWS.protocol)) {
    const container$LWS = sharedDom$LWS.DocumentGetElementById(document$LWS, normalizedHref$LWS.normalizedUrl); // Have we sanitized this URL already?

    if (container$LWS && normalizedHref$LWS.normalizedFragment) {
      checkExistingAndDequeue$LWS(container$LWS, normalizedHref$LWS);
    } else if (!container$LWS) {
      fetchAndSanitize$LWS(normalizedHref$LWS);
    } // If this has been in the form of http://my-url/file.svg#fragment we
    // return the normalized fragment otherwise we return the normalized URL.


    return normalizedHref$LWS.requestedFragment ? `#${normalizedHref$LWS.normalizedFragment}` : `#${normalizedHref$LWS.normalizedUrl}`;
  }

  return url$LWS;
}

function createSvgContainer$LWS(ownerDoc$LWS) {
  return sharedDom$LWS.DocumentCreateElementNS(ownerDoc$LWS, sharedDom$LWS.NAMESPACE_SVG, 'svg');
}

function sanitizeSvgInnerHtml$LWS(stringOrSvg$LWS, dirty$LWS = '') {
  let container$LWS;
  const ownerDoc$LWS = typeof stringOrSvg$LWS === 'string' ? document$LWS : sharedDom$LWS.NodeOwnerDocumentGetter(stringOrSvg$LWS);
  const comment$LWS = sharedDom$LWS.DocumentCreateComment(ownerDoc$LWS, '');

  if (typeof stringOrSvg$LWS === 'string') {
    dirty$LWS = stringOrSvg$LWS;
    container$LWS = createSvgContainer$LWS(ownerDoc$LWS);
  } else {
    const closestSvg$LWS = sharedDom$LWS.ElementClosest(stringOrSvg$LWS, 'svg');
    container$LWS = closestSvg$LWS ? sharedDom$LWS.NodeClone(closestSvg$LWS, false) : createSvgContainer$LWS(ownerDoc$LWS);
  }

  sharedDom$LWS.NodeAppendChild(container$LWS, comment$LWS);
  const outerHTML$LWS = sharedDom$LWS.ElementOuterHTMLGetter(container$LWS);
  const replacedOuterHTML$LWS = shared$LWS.StringReplace(outerHTML$LWS, '<!---->', dirty$LWS);
  const fragment$LWS = sanitizeSvgTextReturnDOM$LWS(replacedOuterHTML$LWS);
  const firstChild$LWS = sharedDom$LWS.NodeFirstChildGetter(fragment$LWS);
  return sharedDom$LWS.ElementInnerHTMLGetter(firstChild$LWS);
}

function sanitizeSvgTextReturnDOM$LWS(dirty$LWS) {
  const sanitizer$LWS = svgSanitizer$LWS();
  return sanitizer$LWS.sanitize(dirty$LWS);
}

function allowCustomTagHook$LWS(node$LWS, data$LWS, _config$LWS) {
  const {
    allowedTags: allowedTags$LWS,
    tagName: tagName$LWS
  } = data$LWS;

  if (!allowedTags$LWS[tagName$LWS] && customTagRegExp$LWS.test(tagName$LWS)) {
    allowedTags$LWS[tagName$LWS] = true;
  }
}

exports.CONFIG = config$LWS;
exports.allowCustomTagHook = allowCustomTagHook$LWS;
exports.blobSanitizer = blobSanitizer$LWS;
exports.sanitize = sanitize$LWS;
exports.sanitizeDocument = sanitizeDocument$LWS;
exports.sanitizeHrefAttributeHook = sanitizeHrefAttributeHook$LWS;
exports.sanitizeSvgHref = sanitizeSvgHref$LWS;
exports.sanitizeSvgInnerHtml = sanitizeSvgInnerHtml$LWS;
exports.sanitizeSvgTextReturnDOM = sanitizeSvgTextReturnDOM$LWS;
exports.sanitizer = sanitizer$LWS;
exports.svgSanitizer = svgSanitizer$LWS;
/*! version: 0.15.16 */
