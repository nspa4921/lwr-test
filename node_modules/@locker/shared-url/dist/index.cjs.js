/*!
 * Copyright (C) 2019 salesforce.com, inc.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var shared$LWS = require('@locker/shared');

var sharedDom$LWS = require('@locker/shared-dom'); // Allow only alphanumeric, '-', '+', and '.' characters.


const REGEX_VALID_MIME_TYPE$LWS = /^[a-z]+\/[a-z0-9.+-]+$/;
const ALLOWED_MIME_TYPES$LWS = ['application/octet-stream', 'application/json', 'application/pdf', 'video/', 'audio/', 'image/', 'font/', 'text/plain', 'text/markdown', 'application/zip', 'application/x-bzip', 'application/x-rar-compressed', 'application/x-tar'];

function isMIMETypeAllowed$LWS(type$LWS) {
  // avoid MIME types which try to escape using special characters
  // Reason: W-4896359
  if (shared$LWS.RegExpTest(REGEX_VALID_MIME_TYPE$LWS, type$LWS)) {
    for (let i$LWS = 0, {
      length: length$LWS
    } = ALLOWED_MIME_TYPES$LWS; i$LWS < length$LWS; i$LWS += 1) {
      if (shared$LWS.StringStartsWith(type$LWS, ALLOWED_MIME_TYPES$LWS[i$LWS])) {
        return true;
      }
    }
  }

  return false;
}

const DEFAULT_URL_SCHEMES$LWS = ['http:', 'https:'];
const DISALLOWED_ENDPOINTS$LWS = ['/aura', '/webruntime'];
const REMOVE_URL_CHARS_REG_EXP$LWS = /[\u2029\u2028\n\r\t]/g;
const normalizerAnchor$LWS = sharedDom$LWS.DocumentCreateElement(document, 'a');
const TRUSTED_DOMAINS$LWS = /\.(force|salesforce|visualforce|documentforce|my\.site|salesforce-sites)\.com$/; // @TODO W-7302311 Make paths and domains configurable

function isInvalidURL$LWS(parsedURL$LWS) {
  const pathname$LWS = shared$LWS.StringToLowerCase(parsedURL$LWS.pathname);
  return shared$LWS.ArraySome(DISALLOWED_ENDPOINTS$LWS, dep$LWS => shared$LWS.StringIncludes(pathname$LWS, dep$LWS));
}

function isValidURLScheme$LWS(url$LWS, schemes$LWS = DEFAULT_URL_SCHEMES$LWS) {
  sharedDom$LWS.HTMLAnchorElementHrefSetter(normalizerAnchor$LWS, url$LWS);
  return shared$LWS.ArrayIncludes(schemes$LWS, sharedDom$LWS.HTMLAnchorElementProtocolGetter(normalizerAnchor$LWS));
}

function parseURL$LWS(url$LWS) {
  sharedDom$LWS.HTMLAnchorElementHrefSetter(normalizerAnchor$LWS, sanitizeURLString$LWS(url$LWS));
  return {
    normalizedURL: sharedDom$LWS.HTMLAnchorElementHrefGetter(normalizerAnchor$LWS),
    hostname: sharedDom$LWS.HTMLAnchorElementHostnameGetter(normalizerAnchor$LWS),
    pathname: sharedDom$LWS.WindowDecodeURIComponent(sharedDom$LWS.HTMLAnchorElementPathnameGetter(normalizerAnchor$LWS))
  };
}

function sanitizeURLString$LWS(urlString$LWS) {
  return urlString$LWS === '' ? urlString$LWS : shared$LWS.StringReplace(urlString$LWS, REMOVE_URL_CHARS_REG_EXP$LWS, '');
}

function sanitizeURLForElement$LWS(url$LWS) {
  sharedDom$LWS.HTMLAnchorElementHrefSetter(normalizerAnchor$LWS, url$LWS);
  return sanitizeURLString$LWS(sharedDom$LWS.HTMLAnchorElementHrefGetter(normalizerAnchor$LWS));
}

exports.TRUSTED_DOMAINS = TRUSTED_DOMAINS$LWS;
exports.isInvalidURL = isInvalidURL$LWS;
exports.isMIMETypeAllowed = isMIMETypeAllowed$LWS;
exports.isValidURLScheme = isValidURLScheme$LWS;
exports.parseURL = parseURL$LWS;
exports.sanitizeURLForElement = sanitizeURLForElement$LWS;
exports.sanitizeURLString = sanitizeURLString$LWS;
/*! version: 0.15.16 */
