export declare const ArrayCtor: ArrayConstructor;
export declare const ArrayIsArray: (arg: any) => arg is any[];
export declare const ArrayProtoPush: (...items: any[]) => number, ArrayProtoSlice: (start?: number | undefined, end?: number | undefined) => any[];
export declare function ArrayConcat(array: any[], ...args: Parameters<typeof Array.prototype.concat>): ReturnType<typeof Array.prototype.concat>;
export declare function ArrayFilter(array: any[], iteratee: Function): ReturnType<typeof Array.prototype.filter>;
export declare function ArrayIncludes(array: any[], value: any): ReturnType<typeof Array.prototype.includes>;
export declare function ArrayIndexOf(array: any[], ...args: Parameters<typeof Array.prototype.indexOf>): ReturnType<typeof Array.prototype.indexOf>;
export declare function ArrayJoin(array: any[], ...args: Parameters<typeof Array.prototype.join>): ReturnType<typeof Array.prototype.join>;
export declare function ArrayPop(array: any[]): ReturnType<typeof Array.prototype.pop>;
export declare function ArrayShift(array: any[]): ReturnType<typeof Array.prototype.shift>;
export declare function ArraySlice(array: any[], ...args: Parameters<typeof Array.prototype.slice>): ReturnType<typeof Array.prototype.slice>;
export declare function ArraySome(array: any[], iteratee: Function): ReturnType<typeof Array.prototype.some>;
export declare function ArraySort(array: any[]): ReturnType<typeof Array.prototype.sort>;
export declare function ArrayUnshift(array: any[], ...args: Parameters<typeof Array.prototype.unshift>): ReturnType<typeof Array.prototype.unshift>;
//# sourceMappingURL=Array.d.ts.map