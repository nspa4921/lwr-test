import { DistortionMap, DistortionMapEntries, SandboxKey } from '@locker/distortion';
import { Instrumentation } from '@locker/instrumentation';
import { VirtualEnvironment } from '@locker/near-membrane-dom';
import { GlobalObject } from '@locker/shared-dom/types';
interface EvalHelpers {
    asyncToGen: (func: GeneratorFunction, thisArg: any, args: any[]) => Promise<any>;
    forAwaitOf: (index: number, stage: number, object?: object) => any;
    loadScript: (thisArg: any, url: string) => Promise<any>;
    loadStyle: (thisArg: any, url: string) => Promise<any>;
    namespace: <T>(object: T) => Readonly<T>;
    spreadable: <T extends any[]>(array: T) => T;
    super: (clazz: typeof Function, methodName: PropertyKey, thisArg: any, args: ArrayLike<any>) => any;
}
interface SandboxRecord {
    env: VirtualEnvironment;
    helpers: EvalHelpers;
    distortions: DistortionMap;
    distortionFactory: (window: GlobalObject) => DistortionMapEntries;
}
export declare function clearEvalContext(): any;
export declare function clearEvalHelpers(): EvalHelpers;
export declare function createSandbox(key: SandboxKey, distortionFactory: (window: GlobalObject) => DistortionMapEntries, endowments?: object, instrumentation?: Instrumentation): SandboxRecord;
export declare function getSandbox(key: SandboxKey): SandboxRecord;
export declare function setEvalContext(context: any): void;
export declare function setEvalHelpers(helpers: EvalHelpers): void;
export declare function toSource(value: Function | string): string;
export {};
//# sourceMappingURL=common.d.ts.map