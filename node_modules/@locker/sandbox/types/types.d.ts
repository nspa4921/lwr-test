import { DistortionMap, DistortionMapEntries, SandboxKey } from '@locker/distortion';
import { Instrumentation } from '@locker/instrumentation';
import { VirtualEnvironment } from '@locker/near-membrane-dom';
import { GlobalObject } from '@locker/shared-dom/types';
export interface EvalHelpers {
    asyncToGen: (func: GeneratorFunction, thisArg: any, args: any[]) => Promise<any>;
    forAwaitOf: (index: number, stage: number, object?: object) => any;
    loadScript: (thisArg: any, url: string) => Promise<any>;
    loadStyle: (thisArg: any, url: string) => Promise<any>;
    namespace: <T>(object: T) => Readonly<T>;
    spreadable: <T extends any[]>(array: T) => T;
    super: (clazz: typeof Function, methodName: PropertyKey, thisArg: any, args: ArrayLike<any>) => any;
}
export declare type EvaluateOptions = {
    context?: any;
    endowments?: object;
    instrumentation: Instrumentation;
    key: SandboxKey;
    source: Function | string;
    sourceType: string;
    verboseInstrumentation: boolean;
};
export interface SandboxRecord {
    env: VirtualEnvironment;
    helpers: EvalHelpers;
    distortions: DistortionMap;
    distortionFactory: (window: GlobalObject) => DistortionMapEntries;
}
//# sourceMappingURL=types.d.ts.map