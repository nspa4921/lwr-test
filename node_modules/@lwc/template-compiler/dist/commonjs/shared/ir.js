"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isComponentProp = exports.isIRBooleanAttribute = exports.isIRStringAttribute = exports.isIRExpressionAttribute = exports.isSlot = exports.isTemplate = exports.isCustomElement = exports.isCommentNode = exports.isTextNode = exports.isElement = exports.createComment = exports.createText = exports.createElement = void 0;
const types_1 = require("./types");
function createElement(original, location) {
    return {
        type: 'element',
        tag: original.tagName,
        namespace: original.namespaceURI,
        children: [],
        location,
        __original: original,
    };
}
exports.createElement = createElement;
function createText(value, location) {
    return {
        type: 'text',
        value,
        location,
    };
}
exports.createText = createText;
function createComment(value, location) {
    return {
        type: 'comment',
        value,
        location,
    };
}
exports.createComment = createComment;
function isElement(node) {
    return node.type === 'element';
}
exports.isElement = isElement;
function isTextNode(node) {
    return node.type === 'text';
}
exports.isTextNode = isTextNode;
function isCommentNode(node) {
    return node.type === 'comment';
}
exports.isCommentNode = isCommentNode;
function isCustomElement(node) {
    return isElement(node) && node.component !== undefined;
}
exports.isCustomElement = isCustomElement;
function isTemplate(element) {
    return element.tag === 'template';
}
exports.isTemplate = isTemplate;
function isSlot(element) {
    return element.tag === 'slot';
}
exports.isSlot = isSlot;
function isIRExpressionAttribute(attribute) {
    return attribute.type === types_1.IRAttributeType.Expression;
}
exports.isIRExpressionAttribute = isIRExpressionAttribute;
function isIRStringAttribute(attribute) {
    return attribute.type === types_1.IRAttributeType.String;
}
exports.isIRStringAttribute = isIRStringAttribute;
function isIRBooleanAttribute(attribute) {
    return attribute.type === types_1.IRAttributeType.Boolean;
}
exports.isIRBooleanAttribute = isIRBooleanAttribute;
function isComponentProp(identifier, root, parentStack) {
    var _a;
    const { name } = identifier;
    let current = root;
    // Walking up the AST and checking for each node to find if the identifer name is identical to
    // an iteration variable.
    for (let i = parentStack.length; i >= 0; i--) {
        if (isElement(current)) {
            const { forEach, forOf } = current;
            if ((forEach === null || forEach === void 0 ? void 0 : forEach.item.name) === name ||
                ((_a = forEach === null || forEach === void 0 ? void 0 : forEach.index) === null || _a === void 0 ? void 0 : _a.name) === name ||
                (forOf === null || forOf === void 0 ? void 0 : forOf.iterator.name) === name) {
                return false;
            }
        }
        current = parentStack[i - 1];
    }
    // The identifier is bound to a component property if no match is found after reaching to AST
    // root.
    return true;
}
exports.isComponentProp = isComponentProp;
//# sourceMappingURL=ir.js.map