import { Activity, ActivityDetail, Instrumentation, Metric, MetricsReporter, Schema, SchematizedPayload } from '../interfaces';
import { ActivityData } from '../interfaces-private';
import { onActivityError } from './ActivityImpl';
import { MetricsImpl } from './MetricsImpl';
import { NextgenImpl } from './NextgenImpl';
import { PublicSafety } from './PublicSafety';
import { LightningElement, MetricsTags, SchematizedData } from 'o11y/shared';
import { LogPromptListener } from 'src/shared/TypeDefinitions';
export declare class InstrumentationImpl implements Instrumentation, MetricsReporter {
    private readonly _nextGen;
    private readonly _name;
    protected static readonly defaultAppName = "APP_NOT_REGISTERED";
    private readonly _metrics;
    private readonly _onActivityStoppedCallback;
    protected readonly _onActivityErrorCallback: onActivityError;
    protected readonly _safety: PublicSafety;
    private readonly _simpleTextMaxLength;
    constructor(_nextGen: NextgenImpl, _name: string);
    protected _initMetrics(): MetricsImpl;
    private _incrementError;
    get name(): string;
    protected _wrapUserPayload(userSchemaOrText: Schema | string, userData: SchematizedData, onlyIfBoth?: boolean): SchematizedPayload;
    log(userSchemaOrText: Schema | string, userData?: SchematizedData): void;
    protected _logInternal(loggerName: string, schema: Schema, data: SchematizedData, timestamp: number, rootId?: string): number;
    error(error: Error | string, userSchemaOrText?: Schema | string, userData?: SchematizedData): void;
    protected _errorInternal(error: Error | string, userSchemaOrText?: Schema | string, userData?: SchematizedData, activityId?: string): number;
    startActivity(name: string): Activity;
    protected _getActivityData(detail: ActivityDetail): ActivityData;
    private _handleActivityStop;
    protected _logActivity(activityData: ActivityData, startTimestamp: number, rootId?: string): void;
    private _handleActivityError;
    private _getPayloadFromProvider;
    domEvent(event: Event, handledBy: HTMLElement | LightningElement, userSchemaOrText?: Schema | string, userData?: SchematizedData, auto?: boolean): void;
    incrementCounter(operation: string, increment?: number, hasError?: boolean, tags?: MetricsTags): void;
    trackValue(operation: string, value: number, hasError?: boolean, tags?: MetricsTags): void;
    private _checkInputs;
    getUpCounters(): Metric<number>[];
    getValueRecorders(): Metric<number[]>[];
    registerForLogPrompt(listener: LogPromptListener): void;
}
