import{getInstrumentation as t}from"o11y/client";import{registerDecorators as e}from"lwc";import{MODULE_FETCH as r,MAPPINGS_FETCH as s,MODULE_DEFINE as n,MODULE_DEFINE_COUNT as i,BOOTSTRAP_END as a,MODULE_FETCH_DURATION as o,MAPPINGS_FETCH_DURATION as c,BOOTSTRAP_DURATION as m,BOOTSTRAP_AVAILABILITY as h,MODULE_FETCH_COUNT as u,MODULE_AVAILABILITY as l,MAPPINGS_FETCH_COUNT as k,MAPPINGS_AVAILABILITY as f,BOOTSTRAP_ERROR as p,MODULE_ERROR as g,MAPPINGS_ERROR as b}from"lwr/metrics";class d{constructor(t,e){this.marks={},this.config=e||{},this.instrumentation=t}track(){this.trackExistingMarks(),this.setupObserver()}isClearable(t){return!t.startsWith(r)&&!t.startsWith(s)}trackExistingMarks(){const t=performance.getEntriesByType("mark").filter((t=>t.name.startsWith(n)));t.length>0&&this.instrumentation.incrementCounter(i,t.length)}setupObserver(){let t=0,e=0,d=0;new PerformanceObserver((W=>{const T=[];W.getEntries().forEach((r=>{const{name:s,entryType:n,duration:i}=r;"mark"===n&&s.startsWith("lwr.")&&T.push(r),s===a&&(this.marks[s]=r),s===p&&(t+=1),s===g&&(e+=1),s===b&&(d+=1),this.config.enableModuleFetchTracking&&s.startsWith(o)&&this.instrumentation.trackValue(s,i),this.config.enableMappingFetchTracking&&s.startsWith(c)&&this.instrumentation.trackValue(s,i)})),void 0!==this.marks[a]&&(this.instrumentation.trackValue(m,this.marks[a].startTime),this.instrumentation.trackValue(h,1/(1+t)*100),delete this.marks[a]);const y=T.reduce(((t,e)=>e.name.startsWith(n)?t+1:t),0);y>0&&this.instrumentation.incrementCounter(i,y);const C=T.reduce(((t,e)=>e.name.startsWith(r)?t+1:t),0);C>0&&(this.instrumentation.incrementCounter(u,C),this.instrumentation.trackValue(l,C/(C+e)*100));const v=T.reduce(((t,e)=>e.name.startsWith(s)?t+1:t),0);v>0&&(this.instrumentation.incrementCounter(k,v),this.instrumentation.trackValue(f,v/(v+d)*100)),T.forEach((t=>this.isClearable(t.name)&&performance.clearMarks(t.name)))})).observe({entryTypes:["mark","measure"]})}}e(d,{fields:["marks"]});const W=void 0!==globalThis.performance&&"function"==typeof globalThis.performance.mark,T=globalThis.LWR,y={track:()=>{}};function C(e){const r=t("lwrjs"),s=T.metricsConfig||{};(W?new d(r,s):y).track()}export default C;
