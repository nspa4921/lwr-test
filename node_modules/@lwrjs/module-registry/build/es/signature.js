import crypto from 'crypto';
import path from 'path';
import { cwd } from 'process';
import { createRequire } from 'module';
import { getExperimentalFeatures } from '@lwrjs/shared-utils';
const LWC_VERSION = getLWCVersion();
const ENABLED_FINGERPRINTS = getExperimentalFeatures().ENABLE_FINGERPRINTS;
const ENV_KEY = `LWC:${LWC_VERSION},FINGERPRINTS:${ENABLED_FINGERPRINTS}`;
async function getRecursiveModuleHash(definitions, registry, hash, visitedDefinitions = new Set()) {
    if (!definitions.length) {
        return;
    }
    const imports = [];
    for (const definition of definitions) {
        if (visitedDefinitions.has(definition.id)) {
            continue;
        }
        const { ownHash, moduleRecord } = definition;
        hash.update(ownHash);
        if (moduleRecord.imports) {
            imports.push(...moduleRecord.imports);
        }
        visitedDefinitions.add(definition.id);
    }
    if (imports.length) {
        const dependencies = await Promise.all(imports.map(async (dependency) => registry.getModule(dependency)));
        return getRecursiveModuleHash(dependencies, registry, hash, visitedDefinitions);
    }
}
export async function getBundleSignature(moduleId, registry) {
    const root = await registry.getModule(moduleId);
    const hash = crypto.createHash('sha1');
    hash.update(ENV_KEY);
    await getRecursiveModuleHash([root], registry, hash);
    return hash.digest('hex');
}
/**
 * Get the configured LWC version
 */
function getLWCVersion() {
    const require = createRequire(path.join(cwd(), './env-config.js'));
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { version } = require('lwc/package.json');
    return version;
}
//# sourceMappingURL=signature.js.map