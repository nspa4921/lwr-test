var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/markdown-view-provider/src/markdown-parser/plugins/highlighter.ts
__markAsModule(exports);
__export(exports, {
  getHtmlHighlighter: () => getHtmlHighlighter
});
var import_unified = __toModule(require("unified"));
var import_unist_util_modify_children = __toModule(require("unist-util-modify-children"));
var import_hast_util_to_string = __toModule(require("hast-util-to-string"));
var Shiki = __toModule(require("shiki"));
var import_rehype_parse = __toModule(require("rehype-parse"));
var hastParser = (0, import_unified.default)().use(import_rehype_parse.default, {fragment: true});
function isPreNode(node) {
  return node.tagName === "pre";
}
function isParentNode(node) {
  return Array.isArray(node.children);
}
function isCodeNode(node) {
  return node.tagName === "code";
}
async function getHtmlHighlighter(options) {
  const highlighter = await Shiki.getHighlighter({theme: options.theme});
  return function htmlHighlighter() {
    return function(tree) {
      (0, import_unist_util_modify_children.default)((node, index, parent) => {
        if (isPreNode(node) && isParentNode(node) && node.children.length === 1 && isCodeNode(node.children[0]) && typeof node.children[0].properties === "object" && Array.isArray(node.children[0].properties.className) && typeof node.children[0].properties.className[0] === "string" && node.children[0].properties.className[0].startsWith("language-")) {
          const code = (0, import_hast_util_to_string.default)(node);
          const language = node.children[0].properties.className[0].slice("language-".length);
          let highlightedCodeHTML;
          try {
            highlightedCodeHTML = highlighter.codeToHtml(code, language);
          } catch (error) {
            if (error.message != "No language registration for term")
              throw error;
            else
              return;
          }
          const highlightedElm = hastParser.parse(highlightedCodeHTML);
          parent.children[index] = highlightedElm;
        }
      })(tree);
    };
  };
}
