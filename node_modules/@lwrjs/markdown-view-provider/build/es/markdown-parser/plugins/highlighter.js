import unified from 'unified';
import unistUtilModifyChildren from 'unist-util-modify-children';
import hastUtilToString from 'hast-util-to-string';
import * as Shiki from 'shiki';
import rehypeParse from 'rehype-parse';
const hastParser = unified().use(rehypeParse, { fragment: true });
function isPreNode(node) {
    return node.tagName === 'pre';
}
function isParentNode(node) {
    return Array.isArray(node.children);
}
function isCodeNode(node) {
    return node.tagName === 'code';
}
/**
 * Generates an configured unified.Plugin for highlighting `code` snippets.
 * @param options Allow the configuration of the HTML Highlighter (e.g. the `theme` used).
 * @returns An unified Plugin with the HTML Transformer.
 */
export async function getHtmlHighlighter(options) {
    const highlighter = await Shiki.getHighlighter({ theme: options.theme });
    return function htmlHighlighter() {
        return function (tree) {
            unistUtilModifyChildren((node, index, parent) => {
                if (isPreNode(node) &&
                    isParentNode(node) &&
                    node.children.length === 1 &&
                    isCodeNode(node.children[0]) &&
                    typeof node.children[0].properties === 'object' &&
                    Array.isArray(node.children[0].properties.className) &&
                    typeof node.children[0].properties.className[0] === 'string' &&
                    node.children[0].properties.className[0].startsWith('language-')) {
                    const code = hastUtilToString(node);
                    const language = node.children[0].properties.className[0].slice('language-'.length);
                    let highlightedCodeHTML;
                    try {
                        highlightedCodeHTML = highlighter.codeToHtml(code, language);
                    }
                    catch (error) {
                        // Do not though errors for unknown terms, just return and leave the code block as is
                        if (error.message != 'No language registration for term')
                            throw error;
                        else
                            return;
                    }
                    const highlightedElm = hastParser.parse(highlightedCodeHTML);
                    parent.children[index] = highlightedElm;
                }
            })(tree);
        };
    };
}
//# sourceMappingURL=highlighter.js.map