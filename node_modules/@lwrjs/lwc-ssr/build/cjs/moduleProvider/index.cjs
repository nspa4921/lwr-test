var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/moduleProvider/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => moduleProvider_default
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_utils = __toModule(require("./utils.cjs"));
var import_identity = __toModule(require("../identity.cjs"));
function getRootModuleSpecifier(ssrSpecifier) {
  const [, , namespace, name] = ssrSpecifier.split("/");
  return `${namespace}/${name}`;
}
var LwcSsrModuleProvider = class {
  constructor(appPluginConfig, {config, runtimeEnvironment: {hmrEnabled, lwrVersion}}) {
    this.name = "ssr-module-provider";
    this.config = config;
    this.version = lwrVersion;
  }
  async getModuleEntry({specifier}) {
    if (specifier.startsWith(import_identity.LWC_SSR_PREFIX)) {
      const virtualId = `<virtual>/${specifier}`;
      return {
        id: `${virtualId}|${this.version}`,
        virtual: true,
        entry: virtualId,
        specifier,
        version: this.version
      };
    }
  }
  async getModuleSource({
    specifier,
    namespace,
    name
  }) {
    if (!specifier.startsWith(import_identity.LWC_SSR_PREFIX)) {
      return;
    }
    const moduleEntry = await this.getModuleEntry({specifier});
    if (!moduleEntry) {
      throw (0, import_diagnostics.createSingleDiagnosticError)({
        description: import_diagnostics.descriptions.UNRESOLVABLE.MODULE(specifier)
      }, import_diagnostics.LwrUnresolvableError);
    }
    const customElementModule = getRootModuleSpecifier(specifier);
    const originalSource = (0, import_utils.createSsrBootstrapModule)(customElementModule);
    return {
      id: moduleEntry.id,
      namespace,
      name: name || specifier,
      version: this.version,
      specifier,
      moduleEntry,
      ownHash: (0, import_shared_utils.hashContent)(originalSource),
      originalSource
    };
  }
  async getModule(moduleId) {
    if (!moduleId.specifier.startsWith("@lwrjs/lwc-ssr/")) {
      return;
    }
    const moduleSource = await this.getModuleSource(moduleId);
    const compiledSource = moduleSource.originalSource;
    return {
      ...moduleSource,
      compiledSource
    };
  }
};
var moduleProvider_default = LwcSsrModuleProvider;
