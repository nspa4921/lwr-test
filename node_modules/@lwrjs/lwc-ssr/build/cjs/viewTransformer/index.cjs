var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/viewTransformer/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => lwcSsrViewTranformer
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_identity = __toModule(require("../identity.cjs"));
var import_ssr_element = __toModule(require("./ssr-element.cjs"));
function lwcSsrViewTranformer(options, lwrGlobalContext) {
  const {moduleBundler} = lwrGlobalContext;
  return {
    name: "ssr-lwc-transformer",
    async link(stringBuilder, viewContext, viewMeta) {
      if (viewContext.view.bootstrap?.experimentalSSR) {
        const {customElements} = viewMeta;
        for (const customElementRef of customElements) {
          if (customElementRef.location) {
            const {startOffset, endOffset} = customElementRef.location;
            const moduleSpecifier = (0, import_shared_utils.kebabcaseToCamelcase)(customElementRef.tagName);
            const ssrSpecifier = `${import_identity.LWC_SSR_PREFIX}${moduleSpecifier}`;
            const ssrResult = await (0, import_ssr_element.ssrElement)({specifier: ssrSpecifier}, moduleBundler, viewContext.runtimeEnvironment);
            stringBuilder.overwrite(startOffset, endOffset, ssrResult);
          }
        }
      }
    }
  };
}
