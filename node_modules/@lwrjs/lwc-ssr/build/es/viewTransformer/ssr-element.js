import { Worker } from 'worker_threads';
const bundleConfigOverrides = {
    exclude: [],
    alias: {
        lwc: '@lwc/engine-server',
    },
};
const WORKER_CONTEXT_PREPEND = `const { parentPort } = require('worker_threads')`;
const WORKER_CONTEXT_APPEND = `parentPort.postMessage(globalThis.workerResult)`;
function runCodeOnWorker(code) {
    const workerCode = [WORKER_CONTEXT_PREPEND, code, WORKER_CONTEXT_APPEND].join('\n');
    return new Promise((resolve, reject) => {
        const worker = new Worker(workerCode, { eval: true });
        worker.on('message', resolve);
        worker.on('error', reject);
        worker.on('exit', (code) => {
            if (code !== 0) {
                reject(new Error(`Worker stopped with exit code ${code}`));
            }
        });
    });
}
export async function ssrElement(options, moduleBundler, runtimeEnvironment) {
    const { specifier } = options;
    const bundleDef = await moduleBundler.getModuleBundle({ specifier }, runtimeEnvironment, undefined, bundleConfigOverrides);
    const result = await runCodeOnWorker(bundleDef.code);
    if (result.error) {
        throw new Error(result.error);
    }
    else {
        return result.result;
    }
}
//# sourceMappingURL=ssr-element.js.map