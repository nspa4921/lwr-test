import { LwrUnresolvableError, createSingleDiagnosticError, descriptions } from '@lwrjs/diagnostics';
import { hashContent } from '@lwrjs/shared-utils';
import { createSsrBootstrapModule } from './utils.js';
import { LWC_SSR_PREFIX } from '../identity.js';
function getRootModuleSpecifier(ssrSpecifier) {
    const [, , namespace, name] = ssrSpecifier.split('/');
    return `${namespace}/${name}`;
}
export default class LwcSsrModuleProvider {
    constructor(appPluginConfig, { config, runtimeEnvironment: { hmrEnabled, lwrVersion } }) {
        this.name = 'ssr-module-provider';
        this.config = config;
        this.version = lwrVersion;
    }
    async getModuleEntry({ specifier }) {
        if (specifier.startsWith(LWC_SSR_PREFIX)) {
            const virtualId = `<virtual>/${specifier}`;
            return {
                id: `${virtualId}|${this.version}`,
                virtual: true,
                entry: virtualId,
                specifier,
                version: this.version,
            };
        }
    }
    async getModuleSource({ specifier, namespace, name, }) {
        if (!specifier.startsWith(LWC_SSR_PREFIX)) {
            return;
        }
        // Fetch the Module Entry and corresponding route config object
        const moduleEntry = await this.getModuleEntry({ specifier });
        if (!moduleEntry) {
            throw createSingleDiagnosticError({
                description: descriptions.UNRESOLVABLE.MODULE(specifier),
            }, LwrUnresolvableError);
        }
        const customElementModule = getRootModuleSpecifier(specifier);
        const originalSource = createSsrBootstrapModule(customElementModule);
        return {
            id: moduleEntry.id,
            namespace,
            name: name || specifier,
            version: this.version,
            specifier,
            moduleEntry,
            ownHash: hashContent(originalSource),
            originalSource,
        };
    }
    async getModule(moduleId) {
        if (!moduleId.specifier.startsWith('@lwrjs/lwc-ssr/')) {
            return;
        }
        // Get the source to compile
        const moduleSource = (await this.getModuleSource(moduleId));
        const compiledSource = moduleSource.originalSource;
        return {
            ...moduleSource,
            compiledSource,
        };
    }
}
//# sourceMappingURL=index.js.map